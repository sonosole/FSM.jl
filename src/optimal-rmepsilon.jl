"""
    until_not_eps_states(T::WFST{N,I,O,W}, p::N)

Return a set of states just surrounding the eps-closure of state `p`. e.g.

`` (p) ‚îÄ œµ:œµ/w ‚îÄ‚ñ∫ (x) ‚îÄ œµ:œµ/w ‚îÄ‚ñ∫ (y) ‚îÄ i:o/w ‚îÄ‚ñ∫ (q) ``

where ``q`` would be kept, ``x`` and ``y`` would be ignored.
"""
function until_not_eps_states(T::WFST{N,I,O,W}, src::N) where {N,I,O,W}
    E = T.states
    S = Set{N}()
    Q = Vector{N}()

    push!(Q, src)
    while !isempty(Q)
        p = pop!(Q)
        for e ‚àà E[p]
            q = next(e)
            if isone(ilabel(e)) && isone(olabel(e))
                !isequal(p,q) && push!(Q, q)
            else
                q ‚àâ S && push!(S, q)
            end
        end
    end
    return S
end


"""
    œµindegree(T::WFST{N}, src::N) -> qi::Dict{N,Int}
return the indegree of those states reachable from `src` via pure `œµ` arcs.
Or to be more precise, all those states on œµ-paths is in set \n
`{Q[Path(src,dst)] | Path(src,dst) = œµ} - {src}`. 

# Diagram (best viewed in REPL)
      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ œµ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
      ‚îÇ                                ‚Üì
    (src) ‚îÄ‚îÄ‚îÄ œµ ‚îÄ‚îÄ‚îÄ‚ñ∫ (t1) ‚îÄ‚îÄ‚îÄ œµ ‚îÄ‚îÄ‚îÄ‚ñ∫ (t2) ‚îÄ‚îÄ‚îÄ x ‚îÄ‚îÄ‚îÄ‚ñ∫ (q) 
                     ~~~~            ~~~~
    indegrees:        1               2
"""
function œµindegree(T::WFST{N,I,O,W}, src::N) where {N,I,O,W}
    E  = T.states
    qi = Dict{N,Int}()  # Dict: state => indegrees
    qs = Vector{N}()    # state container for iterating

    push!(qs, src)
    while !isempty(qs)
        p = pop!(qs)    # or popfirst!
        for e ‚àà E[p]
            if iseps(e)
                q = next(e)
                if !haskey(qi, q)
                    push!(qs, q)    # q was not in the queue, ensure enqueue ONLY once
                    qi[q] = 1       # maybe q has only one incoming œµ-arc
                else
                    qi[q] += 1      # here q has multiple incoming œµ-arcs
                end
            end
        end
    end
    return qi
end


"""
    œµtoposort(T::WFST{N}, src::N)
return the topo-sorted of those states reachable from `src` via `œµ` arcs.
Or to be more precise, all those sorted states on œµ-paths is in set 
`{Q[Path(src,dst)] | Path(src,dst) = œµ} - {src}`.
"""
function œµtoposort(T::WFST{N,I,O,W}, src::N) where {N,I,O,W}
    E  = T.states
    qi = œµindegree(T, src)  # Dict: state => indegrees
    qs = Vector{N}()        # state container for iterating
    rank = Vector{N}()      # topological ordered states

    push!(qs, src)
    while !isempty(qs)
        p = pop!(qs)
        for e ‚àà E[p]
            if iseps(e)
                q = next(e)
                qi[q] -= 1
                if iszero(qi[q])
                    push!(qs, q)
                    push!(rank, q) # pushed here because src is not included in `rank`
                end
            end
        end
    end
    return rank
end


function epsqv(T::WFST{N,I,O,W}, src::N) where {N,I,O,W}
    E  = T.states
    qwÃå = Dict{N,W}()   # for returning
    qv = Dict{N,W}()   # for accumulating
    qs = Vector{N}()   # state container for iterating
    qi = œµindegree(T, src)
    push!(qv, src=>one(W))
    push!(qs, src)
    while !isempty(qs)
        p = pop!(qs)
        v = qv[p]
        for e ‚àà E[p]
            if iseps(e)
                q = next(e)
                wÃå = v * weight(e)
                # accumulating weights
                if haskey(qv, q)
                    qv[q] += wÃå
                else
                    qv[q] = wÃå
                end
                # and iterating in topological order
                qi[q] -= 1
                iszero(qi[q]) && push!(qs, q)
                isfinal(T, q) && push!(qwÃå, q=>qv[q])
            else
                if !isequal(p, src)
                    #= arcs starting from src must be filted out! i.e. (src)‚îÄ‚îÄ x:y/w ‚îÄ‚îÄ‚ñ∫(dst), where x or y is not œµ. so when p==src, do 
                    NOT accumulate `src=>v` into qwÃå , otherwise (src)‚îÄ‚îÄ x:y/ùüô ‚îÄ‚îÄ‚ñ∫(src) arc would appear after œµ-removal operation =#
                    qwÃå[p] = v
                end
            end
        end
    end
    return qwÃå
end


# ONLY deal with fst having no cyclic
function rm_acyclic_eps(T::WFST{N,I,O,W}) where {N,I,O,W}
    Q = WFST{N,I,O,W}()
    for (start, w) ‚àà T.starts
        addstart(Q, start, w)
    end
    for (final, w) ‚àà T.finals
        addfinal(Q, final, w)
    end
    ùüò  = zero(W)
    Q·∂† = Q.finals
    F  = T.finals
    E  = T.states
    for (p, arcs) ‚àà T.states
        # add non œµ:œµ arcs
        for arc ‚àà arcs
            !iseps(arc) && addarc(Q, p, arc)
        end
        for (q, wÃå) ‚àà epsqv(T, p)
            # ‚Üì discard useless path
            iszero(wÃå) && continue
            # ‚Üì add (p)‚Üí(r) arcs
            for e ‚àà E[q]
                r =   next(e)
                i = ilabel(e)
                o = olabel(e)
                w = weight(e)
                if !(isone(i) && isone(o))
                    # œµ:œµ arcs must be excluded
                    addarc(Q, p, r, i, o, wÃå * w)
                end
            end

            if isfinal(T, q)
                if !isfinal(Q, p)    # note: not !isfinal(T, p)
                    #= if q is a final state of T, then whether 
                    p is a final state of Q or not, p would be set as a final
                    state with zero weight for accumulating all œµ:œµ/wÃå paths =#
                    addfinal(Q, p, ùüò)
                end
                Q·∂†[p] += wÃå * F[q]
            end
        end
    end
    return Q
end


# https://cs.nyu.edu/~mohri/pub/ Weighted Automata Algorithms
"""
    rmeps(T::WFST; atol::Real=0, rtol::Real= atol>0 ? 0 : 1e-2)
Apply epsilon removal to `T`. Keyword argument `atol` or `rtol` is used to control the accuracy, 
this is especially useful when dealing with cyclic WFST. `rmœµ` is an alias of `rmeps`.

!!! note
    For cyclic WFST, this algorithm is effective if the weight of WFST is guaranteed to be k-closed, so 
    small difference between weights shall be ignored to speed up the convergence, i.e. we assume 
        ``x = y`` if ``|x - y| < Œ¥`` 
    where ``Œ¥`` is a small value that can be ignored. A too big ``Œ¥`` may miss some states of the œµ-closure.
"""
function rmeps(T::WFST{N,I,O,W}; atol::Real=0, rtol::Real= atol>0 ? 0 : 1e-2) where {N,I,O,W}
    Q = WFST{N,I,O,W}()
    for (start, w) ‚àà T.starts
        addstart(Q, start, w)
    end
    for (final, w) ‚àà T.finals
        addfinal(Q, final, w)
    end
    ùüò  = zero(W)
    Q·∂† = Q.finals
    F  = T.finals
    E  = T.states
    for (p, arcs) ‚àà T.states
        # add non œµ:œµ arcs
        for arc ‚àà arcs
            !iseps(arc) && addarc(Q, p, arc)
        end
        for (q, wÃå) ‚àà œµdists(T, p; atol, rtol)
            # ‚Üì discard useless path
            iszero(wÃå) && continue
            # ‚Üì repalce (p)‚îÄ‚îÄ ‚ãØ ‚îÄ‚îÄ‚ñ∫(q,wÃå)‚îÄ‚îÄi:o/w‚îÄ‚îÄ‚ñ∫(r) with (p)‚îÄ‚îÄi:o/wÃå*w‚îÄ‚îÄ‚ñ∫(r)
            for e ‚àà E[q]
                if !iseps(e) # œµ:œµ arcs must be excluded
                    addarc(Q, p, next(e), ilabel(e), olabel(e), wÃå * weight(e))
                end
            end
            if isfinal(T, q)
                if !isfinal(Q, p)    # note: not !isfinal(T, p)
                    #= if q is a final state of T, then whether 
                    p is a final state of Q or not, p would be set as a final
                    state with zero weight for accumulating all œµ:œµ/wÃå paths =#
                    addfinal(Q, p, ùüò)
                end
                Q·∂†[p] += wÃå * F[q]
            end
        end
    end
    return Q
end


"""
    rmœµ(T::WFST; atol::Real=0, rtol::Real= atol>0 ? 0 : 1e-2)
alias of `rmeps`.
"""
const rmœµ = rmeps



# TODO
"""
    iepsnorm(T::WFST; atol::Real=0, rtol::Real= atol>0 ? 0 : 1e-2)
Returns an equivalent WFST that is input epsilon-normalized, so as to ensure 
on each path all non-epsilon input labels is ahead of any epsilon input label. 
Output epsilon-normalized WFST is defined similarly. The input WFST needs to be functional.
Keyword argument `atol` or `rtol` is used to control the accuracy, this is 
especially useful when dealing with cyclic WFST. 

!!! note
    For cyclic WFST, this algorithm is effective if the weight of WFST is guaranteed to be k-closed, so 
    small difference between weights shall be ignored to speed up the convergence, i.e. we assume 
        ``x = y`` if ``|x - y| < Œ¥`` 
    where ``Œ¥`` is a small value that can be ignored. A too big ``Œ¥`` may miss some states of the œµ-closure.
    
"""
function iepsnorm(T::WFST{N,I,O,W}; atol::Real=0, rtol::Real= atol>0 ? 0 : 1e-2) where {N,I,O,W}
end
